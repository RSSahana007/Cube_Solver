// This block is for applying plugins to the project.
// Plugins add new tasks and configurations to the build process.
plugins {
    // This plugin is for building an Android application.
    // `libs.plugins.android.application` is a type-safe accessor generated by Gradle for the plugin defined in the `libs.versions.toml` file.
    alias(libs.plugins.android.application)
}

// This is the main configuration block for the Android application.
android {
    // The namespace is a unique identifier for the application's generated R class.
    // It's also used to resolve relative class names in the AndroidManifest.xml file.
    namespace = "com.example.cubesolver"
    // `compileSdk` specifies the API level of the Android SDK to compile the app against.
    // It's important to use a recent version to get access to the latest APIs and features.
    compileSdk = 35

    // `defaultConfig` is where you configure core settings for the application that apply to all build variants.
    defaultConfig {
        // `applicationId` is the unique identifier for the application on the Google Play Store and on the device.
        // It's typically the same as the package name in the source code.
        applicationId = "com.example.cubesolver"
        // `minSdk` is the minimum API level required to run the application.
        // Devices with an API level lower than this will not be able to install the app.
        minSdk = 24
        // `targetSdk` is the API level the application is designed to run on.
        // It's important to keep this updated to the latest version to ensure the app behaves correctly on new Android versions.
        targetSdk = 35
        // `versionCode` is an integer value that represents the version of the application.
        // It's used by the Google Play Store to determine whether an update is available.
        versionCode = 1
        // `versionName` is a string value that represents the version of the application to the user.
        versionName = "1.0"

        // `testInstrumentationRunner` is the class that runs the instrumentation tests for the application.
        // `AndroidJUnitRunner` is the standard test runner for Android.
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    // `buildTypes` is where you configure different build variants of the application, such as "debug" and "release".
    buildTypes {
        // The "release" build type is used for creating the final version of the app that will be published to the Google Play Store.
        release {
            // `isMinifyEnabled` enables or disables code shrinking with ProGuard or R8.
            // It's set to `false` here, which is not recommended for production builds as it can significantly reduce the app's size.
            isMinifyEnabled = false
            // `proguardFiles` specifies the ProGuard configuration files to use for code shrinking and obfuscation.
            // `getDefaultProguardFile` gets the default ProGuard settings from the Android SDK.
            // `proguard-rules.pro` is a custom ProGuard rules file for the application.
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    // `compileOptions` is where you configure the Java compiler options.
    compileOptions {
        // `sourceCompatibility` specifies the Java language version of the source code.
        sourceCompatibility = JavaVersion.VERSION_11
        // `targetCompatibility` specifies the Java language version of the generated bytecode.
        targetCompatibility = JavaVersion.VERSION_11
    }
    
}

// This block is for declaring the dependencies of the application.
dependencies {

    // `implementation` dependencies are available at compile time and are packaged with the application.
    // These are the standard AndroidX libraries for backward compatibility and UI components.
    implementation(libs.appcompat) // Provides backward compatibility for older Android versions.
    implementation(libs.material) // Provides Material Design UI components.
    implementation(libs.activity) // Provides the `ComponentActivity` base class for activities.
    implementation(libs.constraintlayout) // Provides a flexible layout manager for designing complex UIs.
    implementation("androidx.documentfile:documentfile:1.0.1") // Provides a compatibility layer for working with documents and files.
    implementation("commons-codec:commons-codec:1.15") // Provides common encoding and decoding algorithms.
    implementation("commons-io:commons-io:2.11.0") // Provides utility classes for I/O operations.
    
    // `testImplementation` dependencies are only used for running local unit tests on the JVM.
    testImplementation(libs.junit) // The standard testing framework for Java.
    
    // `androidTestImplementation` dependencies are used for running instrumentation tests on an Android device or emulator.
    androidTestImplementation(libs.ext.junit) // Provides Android-specific extensions for JUnit.
    androidTestImplementation(libs.espresso.core) // Provides a framework for writing UI tests.
    
    // These are the Jackson libraries for JSON processing.
    // They are used for converting Java objects to JSON and vice-versa.
    implementation("com.fasterxml.jackson.core:jackson-databind:2.15.2") // Provides data-binding functionality for JSON.
    implementation("com.fasterxml.jackson.core:jackson-core:2.15.2") // Provides the core JSON parsing and generation functionality.
    implementation("com.fasterxml.jackson.core:jackson-annotations:2.15.2") // Provides annotations for customizing JSON serialization and deserialization.
}
